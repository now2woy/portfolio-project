plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'kr.co.jineddy'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	
	// egovframe maven 원격 저장소
	maven { url "https://maven.egovframe.go.kr/maven/" }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	
	implementation 'org.hibernate.orm:hibernate-core:6.5.2.Final'
	
	// Spring Boot BOM에 의해 자동 포함된 6.6.x와 충돌하지 않도록 강제 적용
	configurations.all {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.hibernate.orm') {
				details.useVersion '6.5.2.Final'
			}
		}
	}
	
	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
	annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.2.0"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api:3.0.0"
	
	// Mybatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.5'
	
	// JWT
	implementation("io.jsonwebtoken:jjwt-api:0.12.6")
	runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.6")
	runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.6")
	
	// utils
	implementation("org.apache.commons:commons-lang3:3.18.0")
	implementation("com.google.guava:guava:33.4.8-jre")
	
	// 문서화
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.11'
	
	// amazon s3
	implementation("software.amazon.awssdk:s3:2.33.1")
	
	// PostgreSQL 드라이버
	runtimeOnly 'org.postgresql:postgresql:42.7.3'
	
	// lombok
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// QueryDSL 관련 설정
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
	main {
		java {
			srcDirs += querydslDir
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

compileJava {
	options.annotationProcessorPath = configurations.annotationProcessor
}